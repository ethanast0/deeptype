// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mjvnjaxjilztaebmpxmy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qdm5qYXhqaWx6dGFlYm1weG15Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI0MzU5MTAsImV4cCI6MjA1ODAxMTkxMH0.piNkqjJB7_7qwo0dYI2vUeeahKRZSpMuASceaeKnPTo";

// Check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Create and export the Supabase client
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: isBrowser ? localStorage : undefined,
      detectSessionInUrl: true,
      flowType: 'pkce',
      storageKey: 'supabase.auth.token' // Explicit key for localStorage
    },
    global: {
      headers: {
        'X-Client-Info': 'text-flow'
      }
    }
  }
);

// Helper function to refresh the session
export const refreshSession = async () => {
  try {
    // First try to get the existing session
    const { data: { session: existingSession }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("Error fetching session:", sessionError);
      return null;
    }
    
    // If we have a session but it's old/needs refreshing
    if (existingSession) {
      const { data, error } = await supabase.auth.refreshSession();
      
      if (error) {
        console.error("Error refreshing session:", error);
        return existingSession; // Return the existing session even if refresh failed
      }
      
      return data.session;
    }
    
    return existingSession;
  } catch (error) {
    console.error("Error in refreshSession:", error);
    return null;
  }
};

// Helper function to get the current session
export const getCurrentSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error getting current session:", error);
      return null;
    }
    return data.session;
  } catch (error) {
    console.error("Error in getCurrentSession:", error);
    return null;
  }
};

// Initialize supabase auth with cross-tab communication
export const initializeAuth = () => {
  if (!isBrowser) return null;
  
  // Set up cross-tab auth state change listener
  const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
      // Broadcast auth state change to other tabs
      const authStateUpdate = {
        event,
        session,
        timestamp: Date.now()
      };
      localStorage.setItem('supabase.auth.event', JSON.stringify(authStateUpdate));
    }
  });
  
  // Listen for storage events to sync auth state across tabs
  const handleStorageChange = (e: StorageEvent) => {
    if (e.key === 'supabase.auth.event') {
      // Another tab updated the auth state
      console.log('Auth state changed in another tab');
      refreshSession();
    }
  };
  
  window.addEventListener('storage', handleStorageChange);
  
  return {
    cleanup: () => {
      subscription.unsubscribe();
      window.removeEventListener('storage', handleStorageChange);
    }
  };
};

// Check if there's a persistent session on load
export const checkPersistedSession = async () => {
  // Check both Supabase's storage and our custom backup
  if (!isBrowser) return null;
  
  const session = await getCurrentSession();
  if (session) return session;
  
  // If no session but we have a backup user ID, try to reestablish the session
  const storedUserId = localStorage.getItem('supabase.auth.user.id');
  if (storedUserId) {
    console.log('Found stored user ID, attempting to refresh session');
    return await refreshSession();
  }
  
  return null;
};


